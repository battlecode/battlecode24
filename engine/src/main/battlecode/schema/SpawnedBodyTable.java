// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SpawnedBodyTable extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static SpawnedBodyTable getRootAsSpawnedBodyTable(ByteBuffer _bb) { return getRootAsSpawnedBodyTable(_bb, new SpawnedBodyTable()); }
  public static SpawnedBodyTable getRootAsSpawnedBodyTable(ByteBuffer _bb, SpawnedBodyTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SpawnedBodyTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int robotIds(int j) { int o = __offset(4); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int robotIdsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public IntVector robotIdsVector() { return robotIdsVector(new IntVector()); }
  public IntVector robotIdsVector(IntVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer robotIdsAsByteBuffer() { return __vector_as_bytebuffer(4, 4); }
  public ByteBuffer robotIdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 4); }
  public byte teamIds(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int teamIdsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector teamIdsVector() { return teamIdsVector(new ByteVector()); }
  public ByteVector teamIdsVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer teamIdsAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer teamIdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public battlecode.schema.VecTable locs() { return locs(new battlecode.schema.VecTable()); }
  public battlecode.schema.VecTable locs(battlecode.schema.VecTable obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createSpawnedBodyTable(FlatBufferBuilder builder,
      int robotIdsOffset,
      int teamIdsOffset,
      int locsOffset) {
    builder.startTable(3);
    SpawnedBodyTable.addLocs(builder, locsOffset);
    SpawnedBodyTable.addTeamIds(builder, teamIdsOffset);
    SpawnedBodyTable.addRobotIds(builder, robotIdsOffset);
    return SpawnedBodyTable.endSpawnedBodyTable(builder);
  }

  public static void startSpawnedBodyTable(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addRobotIds(FlatBufferBuilder builder, int robotIdsOffset) { builder.addOffset(0, robotIdsOffset, 0); }
  public static int createRobotIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startRobotIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTeamIds(FlatBufferBuilder builder, int teamIdsOffset) { builder.addOffset(1, teamIdsOffset, 0); }
  public static int createTeamIdsVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createTeamIdsVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startTeamIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addLocs(FlatBufferBuilder builder, int locsOffset) { builder.addOffset(2, locsOffset, 0); }
  public static int endSpawnedBodyTable(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SpawnedBodyTable get(int j) { return get(new SpawnedBodyTable(), j); }
    public SpawnedBodyTable get(SpawnedBodyTable obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

